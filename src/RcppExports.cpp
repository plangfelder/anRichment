// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// match_int_C
List match_int_C(const List& ls1, const IntegerVector& v2, const IntegerVector& incomparables);
RcppExport SEXP _anRichmentMethods_match_int_C(SEXP ls1SEXP, SEXP v2SEXP, SEXP incomparablesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type ls1(ls1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type incomparables(incomparablesSEXP);
    rcpp_result_gen = Rcpp::wrap(match_int_C(ls1, v2, incomparables));
    return rcpp_result_gen;
END_RCPP
}
// intersect_int
List intersect_int(const List& ls1, const IntegerVector& v2, const IntegerVector& incomparables);
RcppExport SEXP _anRichmentMethods_intersect_int(SEXP ls1SEXP, SEXP v2SEXP, SEXP incomparablesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type ls1(ls1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type incomparables(incomparablesSEXP);
    rcpp_result_gen = Rcpp::wrap(intersect_int(ls1, v2, incomparables));
    return rcpp_result_gen;
END_RCPP
}
// intersectSize_int
IntegerVector intersectSize_int(const List& ls1, const IntegerVector& v2, const IntegerVector& incomparables);
RcppExport SEXP _anRichmentMethods_intersectSize_int(SEXP ls1SEXP, SEXP v2SEXP, SEXP incomparablesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type ls1(ls1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type incomparables(incomparablesSEXP);
    rcpp_result_gen = Rcpp::wrap(intersectSize_int(ls1, v2, incomparables));
    return rcpp_result_gen;
END_RCPP
}
// intersectSizesForEnrichment
List intersectSizesForEnrichment(const List& classes, const List& classBg, const IntegerVector& class2bg, const List& refSets, const LogicalVector& doMap, const IntegerMatrix& class2ref, const LogicalVector& class2setIDHasDuplicates, const CharacterVector& bgTypeR, const IntegerVector& mappedRefBg, const LogicalVector& returnMappedSets);
RcppExport SEXP _anRichmentMethods_intersectSizesForEnrichment(SEXP classesSEXP, SEXP classBgSEXP, SEXP class2bgSEXP, SEXP refSetsSEXP, SEXP doMapSEXP, SEXP class2refSEXP, SEXP class2setIDHasDuplicatesSEXP, SEXP bgTypeRSEXP, SEXP mappedRefBgSEXP, SEXP returnMappedSetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< const List& >::type classBg(classBgSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type class2bg(class2bgSEXP);
    Rcpp::traits::input_parameter< const List& >::type refSets(refSetsSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type doMap(doMapSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type class2ref(class2refSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type class2setIDHasDuplicates(class2setIDHasDuplicatesSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type bgTypeR(bgTypeRSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type mappedRefBg(mappedRefBgSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type returnMappedSets(returnMappedSetsSEXP);
    rcpp_result_gen = Rcpp::wrap(intersectSizesForEnrichment(classes, classBg, class2bg, refSets, doMap, class2ref, class2setIDHasDuplicates, bgTypeR, mappedRefBg, returnMappedSets));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_anRichmentMethods_match_int_C", (DL_FUNC) &_anRichmentMethods_match_int_C, 3},
    {"_anRichmentMethods_intersect_int", (DL_FUNC) &_anRichmentMethods_intersect_int, 3},
    {"_anRichmentMethods_intersectSize_int", (DL_FUNC) &_anRichmentMethods_intersectSize_int, 3},
    {"_anRichmentMethods_intersectSizesForEnrichment", (DL_FUNC) &_anRichmentMethods_intersectSizesForEnrichment, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_anRichmentMethods(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
